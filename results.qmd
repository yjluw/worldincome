# Results

```{r}
library(readxl)
library(tidyverse)
library(dplyr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(viridis)
library(RColorBrewer)
library(plotly)

data <- read_excel("WIID_28NOV2023.xlsx")


data$c3 <- ifelse(data$country == "Kosovo", "KOS", data$c3)
data <- data[!data$c3 %in% c("CSK", "REU", "SCG", "SUN", "YUG"), ]
# Add a new column for GDP increase rate
data<- data|>
  mutate(
    year_diff = year - lag(year),
    gdp_increase_rate = ifelse(
      !is.na(year_diff) & year_diff > 0,
      (gdp / lag(gdp))^(1 / year_diff) * 100 - 100,  
      NA
    )
  ) |>
  select(-year_diff)

```

```{r, fig.width=15, fig.height=4}
library(ggplot2)
library(tidyr)
library(dplyr)

data_US <- data |> filter(country == 'United States')
data_US_unique <- data_US %>%
  group_by(country, year) %>%         
  arrange(desc(!is.na(q1)),            # Prioritize rows with non-null q1
          desc(popcovr == "All"),      # Then prioritize popcovr == "All"
          resource == "Earnings") %>% # Then prioritize resource == "Earnings"
  slice(1) %>%                         # Select the first row after sorting
  ungroup()  

# Define the full range of years (1970–2022)
all_years <- seq(1970, 2022)

# Create a complete dataset with all years
data_US_long <- data_US_unique %>%
  select(year, q1, q2, q3, q4, q5) %>%  # Select relevant columns
  pivot_longer(cols = q1:q5, names_to = "Income_Class", values_to = "Percentage") %>%
  mutate(Percentage = replace_na(Percentage, 0)) %>% # Replace NA with 0
  complete(year = all_years, Income_Class = unique(.$Income_Class), fill = list(Percentage = 0))

# Create the stacked bar chart with vertical line and highlighted label
ggplot(data_US_long, aes(x = factor(year), y = Percentage, fill = Income_Class)) +
  geom_bar(stat = "identity") +
  scale_fill_brewer(palette = "Spectral", name = "Income Quintile") + # Use discrete color palette
  geom_vline(xintercept = as.numeric(factor(2020, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(2020, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "COVID-19", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_vline(xintercept = as.numeric(factor(2008, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(2008, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "Financial Crisis", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_vline(xintercept = as.numeric(factor(1991, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(1991, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "End of Cold War", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  scale_x_discrete(limits = as.character(seq(1970, 2022))) + 
  labs(title = "United States  Income Distribution by Quintile (Q1-Q5) Over Years",
       x = "Year",
       y = "Percentage") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```

```{r, fig.width=15, fig.height=4}
data_US <- data |> filter(country == 'Brazil')
data_US_unique <- data_US %>%
  group_by(country, year) %>%         
  arrange(desc(!is.na(q1)),            # Prioritize rows with non-null q1
          desc(popcovr == "All"),      # Then prioritize popcovr == "All"
          resource == "Earnings") %>% # Then prioritize resource == "Earnings"
  slice(1) %>%                         # Select the first row after sorting
  ungroup()  


# Define the range of years to display (1970–2022)
all_years <- seq(1970, 2022)

# Prepare data for the bar plot (q1-q5)
data_US_long <- data_US_unique %>%
  filter(year >= 1970 & year <= 2022) %>%  # Filter for the year range
  select(year, q1, q2, q3, q4, q5, gdp_increase_rate) %>%  # Include GDP increase rate
  pivot_longer(cols = q1:q5, names_to = "Income_Class", values_to = "Percentage") %>%
  mutate(Percentage = replace_na(Percentage, 0)) %>% # Replace NA with 0
  complete(year = all_years, Income_Class = unique(.$Income_Class), fill = list(Percentage = 0))

# Create the stacked bar chart with GDP increase rate line overlay
ggplot(data_US_long, aes(x = factor(year))) +
  geom_bar(aes(y = Percentage, fill = Income_Class), stat = "identity") + # Stacked bar chart
  geom_line(data = data_US_unique %>% filter(year >= 1970 & year <= 2022), 
            aes(y = gdp_increase_rate, group = 1), 
            color = "blue", size = 1.2) + # Line plot for GDP increase rate
  geom_vline(xintercept = as.numeric(factor(2020, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(2020, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "COVID-19", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_vline(xintercept = as.numeric(factor(1994, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(1994, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "BRL Introduced", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_vline(xintercept = as.numeric(factor(1980, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(1980, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "Debt Crisis", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 0.5) + # Line for y = 0
  scale_fill_brewer(palette = "Spectral", name = "Income Quintile") + # Use discrete color palette
  labs(title = "Brazil Income Distribution by Quintile (Q1-Q5) with GDP Increase Rate",
       x = "Year",
       y = "Percentage") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(sec.axis = sec_axis(~ ., name = "GDP Increase Rate (relative scale)"))



```

```{r, fig.width=15, fig.height=4}
data_US <- data |> filter(country == 'United States')
data_US_unique <- data_US %>%
  group_by(country, year) %>%         
  arrange(desc(!is.na(q1)),            # Prioritize rows with non-null q1
          desc(popcovr == "All"),      # Then prioritize popcovr == "All"
          resource == "Earnings") %>% # Then prioritize resource == "Earnings"
  slice(1) %>%                         # Select the first row after sorting
  ungroup()  


# Define the range of years to display (1970–2022)
all_years <- seq(1970, 2022)

# Prepare data for the bar plot (q1-q5)
data_US_long <- data_US_unique %>%
  filter(year >= 1970 & year <= 2022) %>%  # Filter for the year range
  select(year, q1, q2, q3, q4, q5, gdp_increase_rate) %>%  # Include GDP increase rate
  pivot_longer(cols = q1:q5, names_to = "Income_Class", values_to = "Percentage") %>%
  mutate(Percentage = replace_na(Percentage, 0)) %>% # Replace NA with 0
  complete(year = all_years, Income_Class = unique(.$Income_Class), fill = list(Percentage = 0))

# Create the stacked bar chart with GDP increase rate line overlay
ggplot(data_US_long, aes(x = factor(year))) +
  geom_bar(aes(y = Percentage, fill = Income_Class), stat = "identity") + # Stacked bar chart
  geom_line(data = data_US_unique %>% filter(year >= 1970 & year <= 2022), 
            aes(y = gdp_increase_rate, group = 1), 
            color = "blue", size = 1.2) + # Line plot for GDP increase rate
  geom_vline(xintercept = as.numeric(factor(2020, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(2020, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "COVID-19", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_vline(xintercept = as.numeric(factor(2008, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(2008, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "Financial Crisis", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_vline(xintercept = as.numeric(factor(1991, levels = all_years)), 
             color = "red", size = 0.8) +
  geom_label(aes(x = as.numeric(factor(1991, levels = all_years)), 
                 y = 105),  # Place the label slightly above the maximum bar height
             label = "End of Cold War", 
             fill = "yellow",  # Highlight color
             color = "black",  # Text color
             fontface = "bold", size = 3) + 
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 0.5) + # Line for y = 0
  scale_fill_brewer(palette = "Spectral", name = "Income Quintile") + # Use discrete color palette
  labs(title = "Income Distribution by Quintile (Q1-Q5) with GDP Increase Rate",
       x = "Year",
       y = "Percentage") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(sec.axis = sec_axis(~ ., name = "GDP Increase Rate (relative scale)"))



```

```{r, fig.width=15, fig.height=15}
data_gini_all_year <- data |> filter(country != 'United Satates', resource != 'Incasdome (gross)')

data_gini_all_year <- data_gini_all_year %>%
  group_by(country, year) %>%
  arrange(desc(!is.na(gini)),
          desc(!is.na(q1)),
          desc(popcovr == "All"),
          resource == "Earnings") %>%
  slice(1) %>%
  ungroup()
data_gini_2022 <- data_gini_all_year |> filter(year == 2016)


# Data frame with Gini Index
data_gini <- data.frame(
  country = data_gini_2022$country,
  gini = data_gini_2022$gini,
  c3 = data_gini_2022$c3,
  postal = data_gini_2022$c2
)


# Get world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Rename `name_long` to `country` for matching and join
world <- world %>%
  mutate(c3 = su_a3) %>% # Create a new column named `country`
  mutate(country = name_long) %>%
  left_join(data_gini, by = "c3") # Perform the join

ggplot(data = world) +
  geom_sf(aes(fill = gini), color = "black", size = 0.2) +
  scale_fill_distiller(
    palette = "RdYlGn",  # Red-Yellow-Green gradient
    direction = -1,      # Reverse to make it Green-to-Red
    na.value = "gray90"  # Color for missing values
  ) +
  theme_minimal() +
  labs(
    title = "Gini Index by Country",
    fill = "Gini Index"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text = element_blank(),
    axis.ticks = element_blank()
  )

```

```{r}

# Assuming your dataset is called `data_gini_all_year`
# Structure: country, year, gini, c3 (ISO3 code for countries)

# Step 1: Get the list of all unique countries and years
all_countries <- unique(data_gini_all_year$country)
all_years <- seq(1950, 2021)

# Step 2: Create a complete grid of country and year
complete_grid <- expand.grid(country = all_countries, year = all_years)

# Populate the grid with Gini coefficient data
complete_grid$gini <- NA
complete_grid$gini <- data_gini_all_year$gini[
  match(
    paste(complete_grid$country, complete_grid$year, sep = "_"),
    paste(data_gini_all_year$country, data_gini_all_year$year, sep = "_")
  )
]
complete_grid$c3 <- data_gini_all_year$c3[match(complete_grid$country, data_gini_all_year$country)]

# Prepare spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
complete_grid$geometry <- world$geometry[match(complete_grid$c3, world$iso_a3_eh)]

# Convert year to a factor for animation
plot_data <- complete_grid %>%
  mutate(year = as.factor(year))

# Define the range for the Gini coefficient
gini_min <- min(plot_data$gini, na.rm = TRUE)
gini_max <- max(plot_data$gini, na.rm = TRUE)

# Create Plotly Choropleth Map
fig <- plot_ly(
  data = plot_data,
  type = "choropleth",
  locations = ~c3,             # Use the ISO3 column for country codes
  locationmode = "ISO-3",      # ISO Alpha-3 codes for mapping
  z = ~gini,                   # Gini coefficient values
  frame = ~year,               # Animation frames by year
  text = ~paste(country, "<br>Gini Coefficient:", gini),
  hoverinfo = "text",
  colorscale = "Viridis",       # Use RdYlGn color scale for the map
  zmin = gini_min,             # Set the minimum for the color scale
  zmax = gini_max,             # Set the maximum for the color scale
  colorbar = list(title = "Gini Coefficient")
)

# Customize Layout
fig <- fig %>%
  layout(
    title = "World Gini Coefficients Over Time",
    geo = list(
      projection = list(type = "natural earth"),
      showcoastlines = TRUE
    )
  )

# Display the Map
fig

```

